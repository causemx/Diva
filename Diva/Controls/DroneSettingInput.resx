<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="PBDronePhoto.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAADoAAAA6CAYAAADhu0ooAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAZdEVYdFNvZnR3YXJlAEFkb2JlIEltYWdlUmVhZHlxyWU8AAADImlUWHRYTUw6Y29tLmFkb2Jl
        LnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQi
        Pz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENv
        cmUgNS4zLWMwMTEgNjYuMTQ1NjYxLCAyMDEyLzAyLzA2LTE0OjU2OjI3ICAgICAgICAiPiA8cmRmOlJE
        RiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8
        cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20v
        eGFwLzEuMC8iIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxu
        czpzdFJlZj0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlUmVmIyIgeG1w
        OkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M2IChXaW5kb3dzKSIgeG1wTU06SW5zdGFuY2VJ
        RD0ieG1wLmlpZDpCRjg5RTkyMkFBQTQxMUU4ODg2Q0YzN0E3MDk4MkM2NSIgeG1wTU06RG9jdW1lbnRJ
        RD0ieG1wLmRpZDpCRjg5RTkyM0FBQTQxMUU4ODg2Q0YzN0E3MDk4MkM2NSI+IDx4bXBNTTpEZXJpdmVk
        RnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOkJGODlFOTIwQUFBNDExRTg4ODZDRjM3QTcwOTgy
        QzY1IiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOkJGODlFOTIxQUFBNDExRTg4ODZDRjM3QTcwOTgy
        QzY1Ii8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQg
        ZW5kPSJyIj8+mNKqdAAACfBJREFUaEPlm1mIVdkVhqX7odMEmvRbkoc0jd2Y9ECHPGqhOIKKIApKl+OD
        IyhOrSjSIjjiEPDBCc2LEMWIQvLgkAiaGlPVXc62ojHOglNwnnVnfevudbLvuefeu0+lhDT1w8+5Z5+1
        /rX+e26dYZ9TXbp3794R7CPcL3zslx8Ls+KqkbxQp68wKy6hcy6Kmck5iUmXIk1mxVYjeWmtimazTGUx
        MzkHa4Ta0JYtW9zTp0/dkCFDrMFfdskB4skjH52tW7eaDqzxYSXIMpXFdON5mJjcuHGjaDl3+vRp16tX
        L2vuJ76XKBBPHvnoAHS9Fsw0K2FRTDcfyx5CbSA0OWDAAGvqD76PXCCPfHRizUpIFNMGKvED4c+EXwq1
        8IYNG0TDuQsXLoQm/+h7aBfIRwc9dEHKLPXp4wPiZXMU02ay+I2wThgWc6tXr5b8gslBgwbZ+Hbt9n+E
        6KhZdM0s9XyNkPT1jWzONBcybSrNnUIV7devX7LXypjc5fvsEKCHbpZZ+qAfXxf+STZnGjSmjYX8VugG
        Dhzo6urq3Js3byTeufPnz+vy8uXLb82kAV30qXPp0iWta/Xph77oz/fwrQxnmoRpcyHrha6lpUXinGtq
        anIHDx50r1+/1iLDhw9/qyYN6FOHetSlPn00NjZqX/Tn+6iX1UyTMG3OyBWKioMDBw642bNnuyVLlrhN
        mzbp2PTp063AUN/TWwH61KEe2Lx5s/ZBP/v379ex4Ev/WFZzGf1K6MaOHSsxhaPe3r173alTp9yCBQt0
        bP369SYOq55OJOZd4S+EaLN8128qC4nR0w2kHqA+fdCPndro08d9Jau5jHYTut69e7sHDx64mzdvukmT
        JrnRo0e7s2fPSl4B27dvDy8QDgm/8D0mkLFaof78Msh4rQ9NIGNfCNFTfeoYqE8f9ENf9EefxAq7SUi0
        UUxeE7p58+a5ly9fSlwxdu7c6U6cOKGfz50752pra63QG+E832xX4V/9uKupqdHLO759lqzbNh/X1efN
        FaKjuugD6lE3DfqjT+KF9J1pNjQIPxEWmbx165Zbvny5e/bsmcQ7t27dOhWlUa5HOTiwbdWqVVYMsqce
        8Zm/nz179rg7d+5ovoF1xoO/L+KTPY8euuhTx74Y6gO20Rf9ZZj9VELKGmUPnBUmJu/du+dGjhypAhwM
        EGdszJgxJuomT57sbty4IVrONTQ0hKccPWjYF3Tt2jU9QjY2NumSdcB24iyH00V9PQdQp7ro2zbqUp8c
        OxjSH2Mps/joKhIlRhOTCDx//jxtSLfNmDEj+QJCs5y8OTgA9tSsWbO0eQN7paWltYSMG4gnz/Y8ev37
        909qmEnqz5w508a1L9v24sWL8GxQZBaTH/nBcnuN8ylfxHnWbW/T0IgRIyxGuWjRIvfw4UNt9NWrV/qz
        OnPmjK5nGQU//HBG44gH5KMT6lKHeqm99k8hfen53syGe1uIr49EVo3uZdBM3r9/P23y50LiSg5SNBiY
        /TfLYcOG6dEQcJHR1tamn8sZZTtxgDzyQz30y/wddvMHL/pLzNJ/yiw/NQ18yMDjx4/do0eP3IQJEywg
        NGksMmt7Ldyzffv21Z8QpwHM8HfL32TaZIEtfnurxpNHvmmZSX7iWSYBJmQ9MUv/+MAP60J+Yv/doxzl
        xo8fbxvbhNzxhyaNidnFixdrEzQzdOhQzZ06dSo7JzEQS+IB+eigZyapw5ivm5gEkmJm6Ze+1UdwFkj2
        6OfC134QNgt/JQzNpflr4X1hYpajKM3Nnz+ffvWC2wwUjrSl5hi3L4R4QD466KVMUu833l8CSQnN0jf9
        Ww6+PmebNY7ZKcLf+fUYfiYsMbt27VrRdXKKKBjgb5CL8dCgkXG285l4QH4Zk595b0WQlBJKLD7woyZh
        uvm8TMyuWLFC9ApXKsD2aMzBiM+2Ry1/5cqVVU0CCY1iVvN5idkXwuSGHIR7FIQGjSC9R0Ewm/ASfe8p
        ExIexazGcxHIMplHYk8A7hcxEGvU7i+DPQm/1AIVIClRLGk8Lw3yWc1ywQ6am5vVQKxR4kEwL1zVJJCU
        KJY0npcG+fxToevTp4/oOtfaWjATa5R4QD466HnpipCUKJY0npchZP2VUC8kjh49qgZijRJPHvnoeMmq
        EIkoljSelyFk/a5QrzmZBcBArFHiySMfHS9ZFSIRxZLG8zKErP9L6K5fv643zBiINUo8t2Xko+Mlq0Ik
        oljSeF6GkPWjQm36ypUraiDWKPHkkY+Ol6wKkYhiSeN5GULW/y50R44ccbdv31YDsUaJJ498dLxkVYhE
        FEsaz8sQsv5noV7lcPeAgVijxJNHPjpesipEIooljeelQT5/KNTJMGYH7Po21ijx+/btM6PofOilK0Ik
        omgNt+eiXglkmZjkHpKfIfj++7Yoo8QB8oJ72yizklZCycu8qG/PbVrI94V6T2s3yobW1u+KjLLe0NCo
        y9Ao64bUjTy673tPmZCU0GDF27S8N94hMfkXoU5b2o0yJ3/Q3PyPIqN24c4sX2iUOHDs2DHNRyeYBkW/
        rFlJM5NVb7zzTKWETEymb5QpArhQD43arZjdwgG22wU9eekbefR9nUyzkkYv8VMpEZNjId8RZppkjFk8
        UFdXH2WUOGCzfxXMvuP9JZCxxGS1ybGY6c60WZ1RN5Ng2bJlFu+mTZumY/xEQ6P8RHm+2dRUuLMBbLcJ
        a/JMY+nSpTqWMlv0iFLWi0xWm+6E1Saw/yZcIfy9UE0yI3/x4kVtJrhRfsqSiWdeoeFq5/jxwjMajKUJ
        2E4c8cF7EE9Y2o08dcKHzkL6oB/6SkxWm8AuMWvztiTbI4mQFK30bgETXHfv3tXtBvZamiGIJy+tZWZT
        rxEkzPtIwpj5kGnu3Llu27ZtbseOHW7OnDmJyTVr1hQVnThxouyh47rtyZMneuFgM/flwHbiiAfkoxPq
        hmapTx/0Q1/0lzJJ/xUfMhmrPjbkKiZ8EMx579ChQ7qNg8ju3bvd4MGDdRvPN0eNGuXGjRtXQsbt+Srx
        5JEP0AvOp1qPumlkmIx6bGjEbNkHwTTDeY4nX7t27Uq+jMOHD6d/6vuCz5WYxJGPDkAXferwqIK6Hfkg
        GFZ9tM+5j/MVOHnypJsyZYoVg4eFX/sj43tCnmD/NoOMv+fjvhaSpxrooQuoY+dae7TPdXFHPNqv+rIG
        uHr1qlu4cKHr0aOHFTohnE3j7QX5wuPooYs+dQzhyxr0BYKrqNwva0A9P/EgCISv3wAOBj179rQCcKPv
        tUOAnmlTh3qA+vRhT+Doz8e16/UbWPGFKl5wCs9tvr8OBbroU+dtvlAFO8UrcsZO8dJjyJLXWO2oRzPB
        5duP9jXWLGa+fR2Y/VG/mJxmp3jV3Ngp/nnA2Cn+HcT4f/4PPq7LfwCocv5pU3yq0QAAAABJRU5ErkJg
        gg==
</value>
  </data>
</root>